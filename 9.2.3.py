'''
–ö–ª–∞—Å—Å CaesarCipher
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫–ª–∞—Å—Å CaesarCipher –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è. –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ CaesarCipher –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–¥–≤–∏–≥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∫–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ. –ó–∞ –æ–ø–µ—Ä–∞—Ü–∏—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –º–µ—Ç–æ–¥ encode(), –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ‚Äî decode():

cipher = CaesarCipher(5)

print(cipher.encode('Beegeek'))      # Gjjljjp
print(cipher.decode('Gjjljjp'))      # Beegeek
–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∫–µ —Å–¥–≤–∏–≥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤–ø—Ä–∞–≤–æ, —Ç–∞–∫–∂–µ –∑–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∫–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.

–®–∏—Ñ—Ä–æ–≤–∫–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–µ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–≤–µ—Ä–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏:

print(cipher.encode('–ë–∏geek123'))    # –ë–∏ljjp123
print(cipher.decode('–ë–∏ljjp123'))    # –ë–∏geek123
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ —Å–¥–≤–∏–≥–æ–º —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [1; 26].
'''


class CaesarCipher:
    def __init__(self, shift):
        self.shift = shift

    def encode(self, text,shift = 1):
        shift = self.shift*shift
        encoded_text = ''
        eng = range(ord('a'), ord('z') + 1)
        ENG = range(ord('A'), ord('Z') + 1)
        for char in text:
            if char.isalpha() and (ord(char) in eng or ord(char) in ENG):
                if char.isupper():
                    char_index = ord(char) - ord('A')
                    encoded_char_index = (char_index + shift) % 26
                    encoded_char = chr(encoded_char_index + ord('A'))
                else:
                    char_index = ord(char) - ord('a')
                    encoded_char_index = (char_index + shift) % 26
                    encoded_char = chr(encoded_char_index + ord('a'))
            else:
                encoded_char = char
            encoded_text += encoded_char
        return encoded_text

    def decode(self, text):
        return self.encode(text,-1)
        
# INPUT DATA:

# TEST_1:
cipher = CaesarCipher(10)

print(cipher.encode('Beegeek'))
print(cipher.decode('Gjjljjp'))

# TEST_2:
cipher = CaesarCipher(5)

print(cipher.encode('–ë–∏geek123'))
print(cipher.decode('–ë–∏ljjp123'))

# TEST_3:
cipher = CaesarCipher(10)

words = ['leader', 'life', 'central', 'whatever', 'true', 'show', 'year', 'teacher', 'happen', 'might', 'defense',
         'suggest', 'boy', 'trip', 'wish', 'interest', 'star', 'system', 'husband', 'wait', 'young', 'certainly',
         'with', 'wind', 'thought', 'hard', 'today', 'cup', 'where', 'fly', 'agreement', 'human', 'decision', 'along',
         'billion', 'prevent', 'authority', 'those', 'do', 'perform', 'plan', 'allow', 'president', 'do', 'around',
         'seven', 'dog', 'sea', 'use', 'my', 'head', 'whose', 'important', 'top', 'current', 'east', 'page', 'decide',
         'mouth', 'whatever', 'hospital', 'pattern', 'smile', 'probably', 'at', 'evening', 'current', 'local', 'want',
         'foreign', 'catch', 'option', 'meeting', 'course', 'collection', 'street', 'make', 'economic', 'fly', 'return',
         'experience', 'east', 'position', 'foot', 'one', 'mean', 'break', 'me', 'truth', 'management', 'want',
         'option', 'economic', 'response', 'attorney', 'table', 'push', 'travel', 'water', 'help']

encode_words = [cipher.encode(word) for word in words]
print(encode_words)

decode_words = [cipher.decode(word) for word in encode_words]
print(decode_words)

# TEST_4:
cipher = CaesarCipher(15)

words = ['EvEr', 'WoUlD', 'CeRtAiN', 'WhIcH', 'WiTh', 'ThErE', 'EnViRoNmEnTaL', 'StRuCtUrE', 'NeWs', 'ThRoW', 'NoTe',
         'If', 'WiN', 'ShOuLdEr', 'NeEd', 'WhErE', 'MeThOd', 'FiRsT', 'CiViL', 'BaSe']

encode_words = [cipher.encode(word) for word in words]
print(encode_words)

decode_words = [cipher.decode(word) for word in encode_words]
print(decode_words)

# TEST_5:
cipher = CaesarCipher(15)

words = ['civilüòÄ', 'soüòÅ', 'region‚ò∫', 'beat‚ò∫', 'artistüòç', 'choiceüôÉ', 'includeü§≠', 'degreeüòù', 'pushü§™', 'sideüòè', 'sizeü§•',
         'policyü§®', 'ü§®ü§•üòèü§™üòùü§≠üôÉüòç‚ò∫üòÅüòÄ']

encode_words = [cipher.encode(word) for word in words]
print(encode_words)

decode_words = [cipher.decode(word) for word in encode_words]
print(decode_words)

# TEST_6:
cipher = CaesarCipher(1)
print(cipher.encode('ZzzZzz'))
print(cipher.decode('AaaAaa'))